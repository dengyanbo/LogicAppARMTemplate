{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "connections_azureblob_name": {
            "defaultValue": "azureblob",
            "type": "String"
        },
        "connections_azuremonitorlogs_name": {
            "defaultValue": "azuremonitorlogs",
            "type": "String"
        },
        "workflows_outer_name": {
            "defaultValue": "outer",
            "type": "String"
        },
        "workflows_inner_name": {
            "defaultValue": "inner",
            "type": "String"
        },
        "location": {
            "defaultValue": "",
            "type": "String"
        },
        "storage_account_name": {
            "defaultValue": "",
            "type": "String"
        },
        "storage_account_accessKey": {
            "defaultValue": "",
            "type": "String"
        },
        "log_analytics_workspace_resourceGroup": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string"
        },
        "log_analytics_workspace_name": {
            "defaultValue": "",
            "type": "string"
        },
        "endDateTime": {
            "defaultValue": "2021-05-13",
            "type": "String"
        },
        "numberOfRec": {
            "defaultValue": 15000,
            "type": "Int"
        },
        "startDateTime": {
            "defaultValue": "2021-04-13",
            "type": "String"
        },
        "tableName": {
            "defaultValue": "@parameters('$tableName')",
            "type": "String"
        }
    },
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_azureblob_name')]",
            "location": "[parameters('location')]",
            "kind": "V1",
            "properties": {
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "parameterValueSet": {
                    "name": "keyBasedAuth",
                    "values": {
                        "accountName": {
                            "value": "[parameters('storage_account_name')]"
                        },
                        "accessKey": {
                            "value": "[parameters('storage_account_accessKey')]"
                        }
                    }
                },
                "displayName": "blob-connection"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('connections_azuremonitorlogs_name')]",
            "location": "[parameters('location')]",
            "kind": "V1",
            "properties": {
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                },
                "parameterValues": {
                    "token:TenantId": "[subscription().tenantId]",
                    "token:grantType": "code"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_outer_name')]",
            "location": "[parameters('location')]",
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "IntervalDays": {
                            "defaultValue": 5,
                            "type": "Int"
                        },
                        "endDateTime": {
                            "defaultValue": "2021-05-13",
                            "type": "String"
                        },
                        "numberOfRec": {
                            "defaultValue": 15000,
                            "type": "Int"
                        },
                        "startDateTime": {
                            "defaultValue": "2021-04-13",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "method": "POST",
                                "relativePath": "MonthlyDCsRawLogs01"
                            }
                        }
                    },
                    "actions": {
                        "Initialize_Temp_End_Time": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "TempEndTime",
                                        "type": "string",
                                        "value": "@{addDays(parameters('startDateTime'),parameters('IntervalDays'))}"
                                    }
                                ]
                            }
                        },
                        "Initialize_Temp_Start_Time": {
                            "runAfter": {
                                "Initialize_Temp_End_Time": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "TempStartTime",
                                        "type": "string",
                                        "value": "@parameters('startDateTime')"
                                    }
                                ]
                            }
                        },
                        "Until": {
                            "actions": {
                                "Condition_2": {
                                    "actions": {
                                        "Set_variable_2": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "TempEndTime",
                                                "value": "@parameters('endDateTime')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_New_Temp_End_Time": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@variables('TempEndTime')",
                                                    "@parameters('endDateTime')"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "HTTP": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                        "body": {
                                            "TempEndTime": "@{variables('TempEndTime')}",
                                            "TempStartTime": "@{variables('TempStartTime')}",
                                            "numberOfRec": "@parameters('numberOfRec')"
                                        },
                                        "method": "POST",
                                        "uri": "<Inner_Logic_App_Trigger_Url>"
                                    }
                                },
                                "Set_New_Temp_End_Time": {
                                    "runAfter": {
                                        "Set_New_Temp_Start_Time": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "TempEndTime",
                                        "value": "@{addDays(variables('TempStartTime'),parameters('IntervalDays'))}"
                                    }
                                },
                                "Set_New_Temp_Start_Time": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded",
                                            "Failed",
                                            "Skipped",
                                            "TimedOut"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "TempStartTime",
                                        "value": "@variables('TempEndTime')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Temp_Start_Time": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@greaterOrEquals(variables('TempStartTime'), parameters('endDateTime'))",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },

        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('workflows_inner_name')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('connections_azureblob_name'))]",
                "[resourceId('Microsoft.Web/connections', parameters('connections_azuremonitorlogs_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "endDateTime": {
                            "defaultValue": "[parameters('endDateTime')]",
                            "type": "String"
                        },
                        "numberOfRec": {
                            "defaultValue": "[parameters('numberOfRec')]",
                            "type": "Int"
                        },
                        "startDateTime": {
                            "defaultValue": "[parameters('startDateTime')]",
                            "type": "String"
                        },
                        "$tableName": {
                            "defaultValue": "[parameters('tableName')]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "method": "POST",
                                "schema": {
                                    "properties": {
                                        "TempEndTime": {
                                            "type": "string"
                                        },
                                        "TempStartTime": {
                                            "type": "string"
                                        },
                                        "numberOfRec": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@body('Parse_JSON')",
                            "actions": {
                                "Create_CSV_table_2": {
                                    "runAfter": {
                                        "Run_query_and_list_results_-_Get_logs": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Table",
                                    "inputs": {
                                        "format": "CSV",
                                        "from": "@body('Run_query_and_list_results_-_Get_logs')?['value']"
                                    }
                                },
                                "Create_blob_2": {
                                    "runAfter": {
                                        "Create_CSV_table_2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@body('Create_CSV_table_2')",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/default/files",
                                        "queries": {
                                            "folderPath": "/test",
                                            "name": "@{items('For_each')['StartTime']}-@{items('For_each')['EndTime']}.csv",
                                            "queryParametersSingleEncoded": true
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    }
                                },
                                "Run_query_and_list_results_-_Get_logs": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": "@parameters('$tableName')\n| where TimeGenerated >= datetime(@{items('For_each')['StartTime']}) and TimeGenerated < datetime(@{items('For_each')['EndTime']})\n| order by TimeGenerated asc",
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/queryData",
                                        "queries": {
                                            "resourcegroups": "[parameters('log_analytics_workspace_resourceGroup')]",
                                            "resourcename": "[parameters('log_analytics_workspace_name')]",
                                            "resourcetype": "Log Analytics Workspace",
                                            "subscriptions": "[subscription().subscriptionId]",
                                            "timerange": "Set in query"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 40
                                }
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Run_query_and_list_results_-_Pre-processing": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Run_query_and_list_results_-_Pre-processing')?['value']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "EndTime": {
                                                "type": "string"
                                            },
                                            "StartTime": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "StartTime",
                                            "EndTime"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "Run_query_and_list_results_-_Pre-processing": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "let innerTable = (@parameters('$tableName')\n    | where TimeGenerated between(startofday(datetime(@{triggerBody()?['TempStartTime']})) .. endofday(datetime(@{triggerBody()?['TempEndTime']})))\n    | order by TimeGenerated asc\n    | extend CurRowNum= tostring(row_number())\n    | summarize make_list (TimeGenerated) by CurRowNum);\nlet source1 = ( @parameters('$tableName')\n    | where TimeGenerated between(startofday(datetime(@{triggerBody()?['TempStartTime']})) .. endofday(datetime(@{triggerBody()?['TempEndTime']})))\n    | summarize Count=count()\n    | project CurRowNum=range(1, Count, @{triggerBody()?['numberOfRec']})\n    | mv-expand CurRowNum\n    | extend CurRowNum = tostring(parse_json(CurRowNum))\n    | join (innerTable) \n        on CurRowNum\n    | mv-expand list_TimeGenerated\n    | project TimeGenerated = todatetime(list_TimeGenerated));\nlet ExtendedTimeSeries = source1 | union (datatable (TimeGenerated:datetime) [datetime(@{addDays(triggerBody()?['TempEndTime'],1)})]);\nlet add_rownumber=(T:(TimeGenerated:datetime),shift:int64) {\n    T | order by TimeGenerated asc | extend RN=row_number()+shift\n};\nlet StartTimeSeries = ExtendedTimeSeries | invoke add_rownumber(0);\nlet EndTimeSeries = ExtendedTimeSeries | invoke add_rownumber(-1);\nStartTimeSeries | join EndTimeSeries on RN | project StartTime = TimeGenerated, EndTime = TimeGenerated1",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "[parameters('log_analytics_workspace_resourceGroup')]",
                                    "resourcename": "[parameters('log_analytics_workspace_name')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[subscription().subscriptionId]",
                                    "timerange": "Set in query"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_azureblob_name'))]",
                                "connectionName": "[parameters('connections_azureblob_name')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_azuremonitorlogs_name'))]",
                                "connectionName": "[parameters('connections_azuremonitorlogs_name')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}